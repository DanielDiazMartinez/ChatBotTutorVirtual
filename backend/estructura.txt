project/
├── alembic/                        # (Opcional) Configuración y scripts de migraciones con Alembic
│
├── app/
│   ├── __init__.py
│   ├── main.py                     # Punto de entrada de la aplicación FastAPI
│   │
│   ├── api/                        # Rutas y controladores (endpoints)
│   │   ├── __init__.py
│   │   └── routes/
│   │       ├── __init__.py
│   │       ├── auth_routes.py      # Endpoints para registro e inicio de sesión (profesores y alumnos)
│   │       ├── teacher_routes.py   # Endpoints para operaciones de profesores (ej. subir documentos)
│   │       └── student_routes.py   # Endpoints para operaciones de alumnos (ej. consultas)
│   │
│   ├── core/                       # Configuración y seguridad
│   │   ├── __init__.py
│   │   ├── config.py               # Variables de entorno, conexión a la BBDD, etc.
│   │   └── security.py             # Funciones para generación y validación de JWT, encriptación de contraseñas, etc.
│   │
│   ├── models/                     # Definición de modelos
│   │   ├── __init__.py
│   │   ├── schemas.py              # Modelos Pydantic (DTOs) para validación y serialización
│   │   └── orm_models.py           # Modelos ORM con SQLAlchemy (Tablas en PostgreSQL: Teacher, Student, Document)
│   │
│   ├── services/                   # Lógica de negocio
│   │   ├── __init__.py
│   │   ├── auth_service.py         # Registro, autenticación y generación de tokens
│   │   ├── document_service.py     # Procesamiento y almacenamiento de documentos (incluye vectorización)
│   │   └── chat_service.py         # Procesamiento de consultas, búsqueda en Pinecone y generación de respuestas
│   │
│   └── utils/                      # Funciones y clientes de utilidad
│       ├── __init__.py
│       ├── vectorizer.py           # Funciones para generar embeddings de documentos/consultas
│       └── pinecone_client.py      # Cliente para interactuar con la API de Pinecone
│
├── tests/                          # Pruebas unitarias e integradas
│   ├── __init__.py
│   └── test_routes.py
│
└── requirements.txt                # Lista de dependencias del proyecto
