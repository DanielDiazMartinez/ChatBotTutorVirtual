#!/usr/bin/env python3
"""
Test script para verificar el an√°lisis mejorado de estudiantes
que incluye informaci√≥n contextual de documentos y temas.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.student_analysis_service import get_subject_context_info

def test_context_function():
    """Test b√°sico de la funci√≥n get_subject_context_info"""
    print("=== TEST: Funci√≥n get_subject_context_info ===")
    
    # Simulamos una sesi√≥n de base de datos (sin conectar realmente)
    try:
        # Verificar que la funci√≥n existe y se puede llamar
        print("‚úì Funci√≥n get_subject_context_info importada correctamente")
        
        # Verificar que tiene la estructura esperada
        import inspect
        sig = inspect.signature(get_subject_context_info)
        params = list(sig.parameters.keys())
        
        expected_params = ['db', 'subject_id']
        if params == expected_params:
            print("‚úì Par√°metros de la funci√≥n son correctos:", params)
        else:
            print("‚úó Par√°metros incorrectos. Esperados:", expected_params, "Encontrados:", params)
            
        print("‚úì Funci√≥n lista para usar con base de datos real")
        
    except Exception as e:
        print(f"‚úó Error al verificar funci√≥n: {e}")
        return False
    
    return True

def test_imports():
    """Test de imports necesarios"""
    print("\n=== TEST: Imports del servicio ===")
    
    try:
        from app.services.student_analysis_service import (
            get_subject_context_info,
            generate_student_analysis_summary,
            get_student_messages_by_subject
        )
        print("‚úì Todas las funciones principales importadas correctamente")
        
        # Verificar que se importaron los servicios necesarios
        from app.services import subject_service, topic_service
        print("‚úì Servicios de subject y topic disponibles")
        
        from app.models.models import Document, Topic, Subject
        print("‚úì Modelos de Document, Topic y Subject disponibles")
        
    except ImportError as e:
        print(f"‚úó Error de import: {e}")
        return False
    except Exception as e:
        print(f"‚úó Error inesperado: {e}")
        return False
    
    return True

def test_prompt_enhancement():
    """Test para verificar que el prompt mejorado est√© implementado"""
    print("\n=== TEST: Verificaci√≥n del prompt mejorado ===")
    
    try:
        # Leer el archivo del servicio para verificar que contiene las mejoras
        with open('app/services/student_analysis_service.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar que contiene las nuevas secciones del prompt
        improvements = [
            "DOCUMENTOS Y MATERIALES DISPONIBLES",
            "TEMAS DE LA ASIGNATURA",
            "referencias espec√≠ficas a los documentos",
            "qu√© documentos o temas espec√≠ficos requieren mayor atenci√≥n",
            "get_subject_context_info"
        ]
        
        for improvement in improvements:
            if improvement in content:
                print(f"‚úì Encontrado: {improvement}")
            else:
                print(f"‚úó No encontrado: {improvement}")
                return False
        
        print("‚úì Todas las mejoras del prompt est√°n implementadas")
        
    except Exception as e:
        print(f"‚úó Error al verificar prompt: {e}")
        return False
    
    return True

def main():
    """Ejecutar todos los tests"""
    print("üß™ INICIANDO TESTS DEL AN√ÅLISIS MEJORADO")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_context_function,
        test_prompt_enhancement
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚úó Test fall√≥ con excepci√≥n: {e}")
            results.append(False)
    
    print("\n" + "=" * 50)
    print(f"üìä RESULTADOS: {sum(results)}/{len(results)} tests pasaron")
    
    if all(results):
        print("üéâ ¬°TODOS LOS TESTS PASARON! El an√°lisis mejorado est√° listo.")
    else:
        print("‚ö†Ô∏è  Algunos tests fallaron. Revisar la implementaci√≥n.")
    
    return all(results)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
