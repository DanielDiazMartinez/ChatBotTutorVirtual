@startuml

' ====== PAQUETES ======
package "API" {
    class AuthRoutes {
        +registerUser()
        +login()
    }
    class TeacherRoutes {
        +uploadDocument()
        +listDocuments()
    }
    class StudentRoutes {
        +queryDocument()
    }
}

package "Services" {
    class AuthService {
        +registerTeacher()
        +registerStudent()
        +authenticateUser()
    }
    class DocumentService {
        +processDocument()
        +vectorizeDocument()
        +storeDocumentMetadata()
        +storeDocumentVector()
    }
    class ChatService {
        +processQuery()
        +retrieveVectors()
        +generateAnswer()
    }
}

package "Models (ORM)" {
    class Teacher {
        - id: int
        - email: string
        - fullName: string
        - hashedPassword: string
        - createdAt: DateTime
    }
    class Student {
        - id: int
        - email: string
        - fullName: string
        - hashedPassword: string
        - createdAt: DateTime
    }
    class Document {
        - id: int
        - title: string
        - content: string
        - description: string
        - teacherId: int
        - createdAt: DateTime
    }
}

package "Schemas (Pydantic)" {
    class TeacherCreate
    class TeacherOut
    class StudentCreate
    class StudentOut
    class DocumentUpload
    class DocumentResponse
    class QueryRequest
    class QueryResponse
    class Token
    class TokenData
}

' ====== EXTERNOS ======
package "Database" {
    class PostgreSQL {
        <<database>>
    }
}

package "Vector DB" {
    class Pinecone {
        <<vector database>>
    }
}

' ====== RELACIONES ======
AuthRoutes --> AuthService : "usa"
TeacherRoutes --> DocumentService : "usa"
StudentRoutes --> ChatService : "usa"

DocumentService --> PostgreSQL : "almacena metadata"
DocumentService --> Pinecone : "almacena vectores"
ChatService --> Pinecone : "consulta vectores"

Teacher "1" -- "0..*" Document : "sube"
TeacherRoutes ..> Teacher : "utiliza datos"
StudentRoutes ..> Student : "utiliza datos"

' Los modelos Pydantic sirven como DTOs para transferir datos entre la API y la lÃ³gica de negocio.
AuthRoutes ..> TeacherCreate
AuthRoutes ..> StudentCreate
TeacherRoutes ..> DocumentUpload
StudentRoutes ..> QueryRequest

@enduml
